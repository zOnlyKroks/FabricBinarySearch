name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: true

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete existing release if exists
        continue-on-error: true
        run: |
          gh release delete ${{ github.event.inputs.version }} --yes --cleanup-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: false

  build-linux-x64:
    name: Build Linux x64
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Linux dependencies (with Wayland)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxxf86vm-dev \
            libwayland-dev \
            wayland-protocols \
            libxkbcommon-dev \
            zlib1g-dev \
            pkg-config \
            curl

      - name: Configure CMake (Optimized)
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -march=native -flto -fomit-frame-pointer -fstrict-aliasing -DNDEBUG" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -march=native -flto -fomit-frame-pointer -fstrict-aliasing -DNDEBUG"

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Strip binary
        run: strip --strip-all build/FabricBinarySearch

      - name: Create archive
        run: |
          mkdir -p dist
          cp build/FabricBinarySearch dist/
          tar -czf FabricBinarySearch-linux-x64.tar.gz -C dist .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: FabricBinarySearch-linux-x64.tar.gz
          asset_name: FabricBinarySearch-linux-x64.tar.gz
          asset_content_type: application/gzip

  build-linux-arm64:
    name: Build Linux ARM64
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup QEMU for ARM64
        uses: docker/setup-qemu-action@v3

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxxf86vm-dev \
            libwayland-dev \
            wayland-protocols \
            libxkbcommon-dev \
            zlib1g-dev

      - name: Configure CMake for ARM64 (Optimized)
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -fomit-frame-pointer -fstrict-aliasing -DNDEBUG" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -fomit-frame-pointer -fstrict-aliasing -DNDEBUG" \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64

      - name: Build ARM64
        run: cmake --build build --config Release --parallel

      - name: Strip binary
        run: aarch64-linux-gnu-strip --strip-all build/FabricBinarySearch

      - name: Create archive
        run: |
          mkdir -p dist
          cp build/FabricBinarySearch dist/
          tar -czf FabricBinarySearch-linux-arm64.tar.gz -C dist .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: FabricBinarySearch-linux-arm64.tar.gz
          asset_name: FabricBinarySearch-linux-arm64.tar.gz
          asset_content_type: application/gzip

  build-macos-x64:
    name: Build macOS x64
    needs: create-release
    runs-on: macos-13
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: brew install pkg-config cmake ninja

      - name: Configure CMake (Optimized)
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 -G Ninja \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -march=native -flto -fomit-frame-pointer -fstrict-aliasing -DNDEBUG" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -march=native -flto -fomit-frame-pointer -fstrict-aliasing -DNDEBUG -stdlib=libc++"

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Strip binary
        run: strip build/FabricBinarySearch

      - name: Create archive
        run: |
          mkdir -p dist
          cp build/FabricBinarySearch dist/
          tar -czf FabricBinarySearch-macos-x64.tar.gz -C dist .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: FabricBinarySearch-macos-x64.tar.gz
          asset_name: FabricBinarySearch-macos-x64.tar.gz
          asset_content_type: application/gzip

  build-macos-arm64:
    name: Build macOS ARM64
    needs: create-release
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: brew install pkg-config cmake ninja

      - name: Configure CMake (Optimized)
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 -G Ninja \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -march=native -flto -fomit-frame-pointer -fstrict-aliasing -DNDEBUG" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -march=native -flto -fomit-frame-pointer -fstrict-aliasing -DNDEBUG -stdlib=libc++"

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Strip binary
        run: strip build/FabricBinarySearch

      - name: Create archive
        run: |
          mkdir -p dist
          cp build/FabricBinarySearch dist/
          tar -czf FabricBinarySearch-macos-arm64.tar.gz -C dist .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: FabricBinarySearch-macos-arm64.tar.gz
          asset_name: FabricBinarySearch-macos-arm64.tar.gz
          asset_content_type: application/gzip

  build-windows-x64:
    name: Build Windows x64
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install vcpkg and zlib
        run: |
          # Clone vcpkg
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install zlib:x64-windows-static

      - name: Configure CMake (Optimized)
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="$pwd\vcpkg\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -DCMAKE_C_FLAGS_RELEASE="/O2 /Ob2 /GL /GS- /Gy /arch:AVX2" `
            -DCMAKE_CXX_FLAGS_RELEASE="/O2 /Ob2 /GL /GS- /Gy /arch:AVX2" `
            -DCMAKE_EXE_LINKER_FLAGS="/LTCG /OPT:REF /OPT:ICF"

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Create archive
        run: |
          New-Item -ItemType Directory -Path dist -Force
          Copy-Item "build\Release\FabricBinarySearch.exe" -Destination "dist\"
          Compress-Archive -Path "dist\*" -DestinationPath "FabricBinarySearch-windows-x64.zip" -CompressionLevel Optimal

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: FabricBinarySearch-windows-x64.zip
          asset_name: FabricBinarySearch-windows-x64.zip
          asset_content_type: application/zip

  build-windows-arm64:
    name: Build Windows ARM64
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install vcpkg and zlib
        run: |
          # Clone vcpkg
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install zlib:arm64-windows-static

      - name: Configure CMake (Optimized)
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -A ARM64 `
            -DCMAKE_TOOLCHAIN_FILE="$pwd\vcpkg\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=arm64-windows-static `
            -DCMAKE_C_FLAGS_RELEASE="/O2 /Ob2 /GL /GS- /Gy" `
            -DCMAKE_CXX_FLAGS_RELEASE="/O2 /Ob2 /GL /GS- /Gy" `
            -DCMAKE_EXE_LINKER_FLAGS="/LTCG /OPT:REF /OPT:ICF"

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Create archive
        run: |
          New-Item -ItemType Directory -Path dist -Force
          Copy-Item "build\Release\FabricBinarySearch.exe" -Destination "dist\"
          Compress-Archive -Path "dist\*" -DestinationPath "FabricBinarySearch-windows-arm64.zip" -CompressionLevel Optimal

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: FabricBinarySearch-windows-arm64.zip
          asset_name: FabricBinarySearch-windows-arm64.zip
          asset_content_type: application/zip

  finalize-release:
    name: Finalize Release
    needs: 
      - create-release
      - build-linux-x64
      - build-linux-arm64
      - build-macos-x64
      - build-macos-arm64
      - build-windows-x64
      - build-windows-arm64
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always()
    steps:
      - name: Update release status
        run: |
          echo "Build status:"
          echo "Linux x64: ${{ needs.build-linux-x64.result }}"
          echo "Linux ARM64: ${{ needs.build-linux-arm64.result }}"
          echo "macOS x64: ${{ needs.build-macos-x64.result }}"
          echo "macOS ARM64: ${{ needs.build-macos-arm64.result }}"
          echo "Windows x64: ${{ needs.build-windows-x64.result }}"
          echo "Windows ARM64: ${{ needs.build-windows-arm64.result }}"
