name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: true

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete existing release if exists
        continue-on-error: true
        run: |
          gh release delete ${{ github.event.inputs.version }} --yes --cleanup-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: false

  build:
    name: Build ${{ matrix.platform }} ${{ matrix.arch }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            cmake_arch: ''
            vcpkg_triplet: x64-linux
            artifact_name: FabricBinarySearch-linux-x64
            binary_name: FabricBinarySearch

          # macOS x64 (Intel)
          - os: macos-13
            platform: macos
            arch: x64
            cmake_arch: '-DCMAKE_OSX_ARCHITECTURES=x86_64'
            vcpkg_triplet: x64-osx
            artifact_name: FabricBinarySearch-macos-x64
            binary_name: FabricBinarySearch

          # macOS ARM64 (Apple Silicon) - native build on ARM64 runner
          - os: macos-latest
            platform: macos
            arch: arm64
            cmake_arch: ''
            vcpkg_triplet: arm64-osx
            artifact_name: FabricBinarySearch-macos-arm64
            binary_name: FabricBinarySearch

          # Windows x64
          - os: windows-latest
            platform: windows
            arch: x64
            cmake_arch: '-A x64'
            vcpkg_triplet: x64-windows-static
            artifact_name: FabricBinarySearch-windows-x64
            binary_name: FabricBinarySearch.exe

          # Windows ARM64
          - os: windows-latest
            platform: windows
            arch: arm64
            cmake_arch: '-A ARM64'
            vcpkg_triplet: arm64-windows-static
            artifact_name: FabricBinarySearch-windows-arm64
            binary_name: FabricBinarySearch.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 'c59b04f668d20c7dd83f478835e8266a3cc51270'

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxxf86vm-dev \
            libwayland-dev \
            wayland-protocols \
            libxkbcommon-dev

      - name: Install vcpkg dependencies
        run: |
          ${{ github.workspace }}/vcpkg/vcpkg install zlib --triplet=${{ matrix.vcpkg_triplet }}

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} ${{ matrix.cmake_arch }}

      - name: Build
        run: cmake --build build --config Release

      - name: Package artifacts
        shell: bash
        run: |
          # Debug: Show what was built
          echo "Contents of build directory:"
          ls -la build/ || true
          if [ "${{ matrix.platform }}" = "windows" ]; then
            ls -la build/Release/ || true
          fi

          # Find and copy the binary
          mkdir -p dist
          if [ "${{ matrix.platform }}" = "windows" ]; then
            if [ -f "build/Release/${{ matrix.binary_name }}" ]; then
              cp build/Release/${{ matrix.binary_name }} dist/
              echo "Copied from build/Release/"
            elif [ -f "build/${{ matrix.binary_name }}" ]; then
              cp build/${{ matrix.binary_name }} dist/
              echo "Copied from build/"
            else
              echo "ERROR: Binary not found!"
              exit 1
            fi
          else
            if [ -f "build/${{ matrix.binary_name }}" ]; then
              cp build/${{ matrix.binary_name }} dist/
              echo "Copied from build/"
            else
              echo "ERROR: Binary not found!"
              exit 1
            fi
          fi

          # Verify binary was copied
          echo "Contents of dist:"
          ls -la dist/

          # Create archive
          cd dist
          if [ "${{ matrix.platform }}" = "windows" ]; then
            7z a ../${{ matrix.artifact_name }}.zip *
          else
            tar -czf ../${{ matrix.artifact_name }}.tar.gz *
          fi
          cd ..

          # Verify archive was created
          echo "Archive created:"
          ls -lh ${{ matrix.artifact_name }}.*

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            gh release upload ${{ github.event.inputs.version }} ${{ matrix.artifact_name }}.zip --clobber
          else
            gh release upload ${{ github.event.inputs.version }} ${{ matrix.artifact_name }}.tar.gz --clobber
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/*
          retention-days: 7