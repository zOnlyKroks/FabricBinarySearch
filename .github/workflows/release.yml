name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: true

env:
  VCPKG_COMMIT: 'c59b04f668d20c7dd83f478835e8266a3cc51270'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete existing release if exists
        continue-on-error: true
        run: |
          gh release delete ${{ github.event.inputs.version }} --yes --cleanup-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: false

  build:
    name: Build ${{ matrix.platform }} ${{ matrix.arch }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64
          - os: ubuntu-22.04
            platform: linux
            arch: x64
            cmake_arch: ''
            vcpkg_triplet: x64-linux
            artifact_name: FabricBinarySearch-linux-x64
            binary_name: FabricBinarySearch

          # Linux ARM64
          - os: ubuntu-22.04
            platform: linux
            arch: arm64
            cmake_arch: ''
            vcpkg_triplet: arm64-linux
            artifact_name: FabricBinarySearch-linux-arm64
            binary_name: FabricBinarySearch

          # macOS x64 (Intel)
          - os: macos-12
            platform: macos
            arch: x64
            cmake_arch: '-DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0'
            vcpkg_triplet: x64-osx
            artifact_name: FabricBinarySearch-macos-x64
            binary_name: FabricBinarySearch

          # macOS ARM64 (Apple Silicon)
          - os: macos-14
            platform: macos
            arch: arm64
            cmake_arch: '-DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0'
            vcpkg_triplet: arm64-osx
            artifact_name: FabricBinarySearch-macos-arm64
            binary_name: FabricBinarySearch

          # Windows x64
          - os: windows-2022
            platform: windows
            arch: x64
            cmake_arch: '-A x64'
            vcpkg_triplet: x64-windows-static
            artifact_name: FabricBinarySearch-windows-x64
            binary_name: FabricBinarySearch.exe

          # Windows ARM64
          - os: windows-2022
            platform: windows
            arch: arm64
            cmake_arch: '-A ARM64'
            vcpkg_triplet: arm64-windows-static
            artifact_name: FabricBinarySearch-windows-arm64
            binary_name: FabricBinarySearch.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install system dependencies
        shell: bash
        run: |
          case ${{ matrix.platform }} in
            linux)
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                cmake \
                ninja-build \
                clang \
                lld \
                libc++-dev \
                libc++abi-dev \
                libgl1-mesa-dev \
                libglu1-mesa-dev \
                libx11-dev \
                libxrandr-dev \
                libxinerama-dev \
                libxcursor-dev \
                libxi-dev \
                libxxf86vm-dev \
                libwayland-dev \
                wayland-protocols \
                libxkbcommon-dev \
                pkg-config \
                curl \
                7zip
              ;;
            macos)
              brew update
              brew install pkg-config cmake ninja
              ;;
            windows)
              choco install 7zip -y
              ;;
          esac

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}

      - name: Install vcpkg dependencies
        shell: bash
        run: |
          # Use vcpkg from PATH (the action sets this up)
          vcpkg install zlib --triplet=${{ matrix.vcpkg_triplet }}

      - name: Configure CMake
        shell: bash
        run: |
          CMAKE_ARGS=(
            "-B" "build"
            "-DCMAKE_BUILD_TYPE=Release"
            "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            "-DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}"
            "-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON"
            "-DCMAKE_POSITION_INDEPENDENT_CODE=ON"
          )

          # Platform-specific configurations
          case ${{ matrix.platform }} in
            linux)
              CMAKE_ARGS+=(
                "-DCMAKE_C_COMPILER=clang"
                "-DCMAKE_CXX_COMPILER=clang++"
                "-DCMAKE_C_FLAGS_RELEASE=-O3 -march=native -flto=thin -fomit-frame-pointer -fstrict-aliasing -DNDEBUG"
                "-DCMAKE_CXX_FLAGS_RELEASE=-O3 -march=native -flto=thin -fomit-frame-pointer -fstrict-aliasing -DNDEBUG"
                "-DCMAKE_EXE_LINKER_FLAGS=-flto=thin -fuse-ld=lld"
                "-G" "Ninja"
              )
              ;;
            macos)
              CMAKE_ARGS+=(
                "-DCMAKE_C_COMPILER=clang"
                "-DCMAKE_CXX_COMPILER=clang++"
                "-DCMAKE_C_FLAGS_RELEASE=-O3 -march=native -flto=thin -fomit-frame-pointer -fstrict-aliasing -DNDEBUG"
                "-DCMAKE_CXX_FLAGS_RELEASE=-O3 -march=native -flto=thin -fomit-frame-pointer -fstrict-aliasing -DNDEBUG -stdlib=libc++"
                "-DCMAKE_EXE_LINKER_FLAGS=-flto=thin -fuse-ld=lld"
                "-G" "Ninja"
              )
              ;;
            windows)
              CMAKE_ARGS+=(
                "-DCMAKE_C_FLAGS_RELEASE=/O2 /Ob2 /GL /GS- /Gy /arch:AVX2"
                "-DCMAKE_CXX_FLAGS_RELEASE=/O2 /Ob2 /GL /GS- /Gy /arch:AVX2"
                "-DCMAKE_EXE_LINKER_FLAGS=/LTCG /OPT:REF /OPT:ICF"
                "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded"
                "-G" "Visual Studio 17 2022"
              )
              ;;
          esac

          # Add architecture-specific flags
          CMAKE_ARGS+=(${{ matrix.cmake_arch }})

          echo "CMake arguments: ${CMAKE_ARGS[@]}"
          cmake "${CMAKE_ARGS[@]}"

      - name: Build
        shell: bash
        run: |
          case ${{ matrix.platform }} in
            linux|macos)
              cmake --build build --config Release --parallel
              ;;
            windows)
              cmake --build build --config Release --parallel
              ;;
          esac

      - name: Strip binaries (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          if command -v strip >/dev/null 2>&1; then
            find build -name "${{ matrix.binary_name }}" -type f -executable -exec strip --strip-all {} \; || true
          fi

      - name: Package artifacts
        shell: bash
        run: |
          # Create distribution directory
          mkdir -p dist

          # Find and copy the binary
          BINARY_FOUND=false
          if [ "${{ matrix.platform }}" = "windows" ]; then
            # Windows search paths
            if [ -f "build/Release/${{ matrix.binary_name }}" ]; then
              cp "build/Release/${{ matrix.binary_name }}" dist/
              BINARY_FOUND=true
            elif [ -f "build/${{ matrix.binary_name }}" ]; then
              cp "build/${{ matrix.binary_name }}" dist/
              BINARY_FOUND=true
            fi
          else
            # Unix search paths
            if [ -f "build/${{ matrix.binary_name }}" ]; then
              cp "build/${{ matrix.binary_name }}" dist/
              BINARY_FOUND=true
            fi
          fi

          if [ "$BINARY_FOUND" = "false" ]; then
            echo "ERROR: Binary not found in expected locations!"
            echo "Searching build directory:"
            find build -type f -name "*${{ matrix.binary_name }}*" 2>/dev/null || true
            exit 1
          fi

          # Verify binary
          echo "Binary information:"
          case ${{ matrix.platform }} in
            linux)
              file dist/* || true
              ;;
            macos)
              file dist/* || true
              ;;
            windows)
              # file command might not be available on Windows
              ls -la dist/* || true
              ;;
          esac

          # Create archive
          cd dist
          if [ "${{ matrix.platform }}" = "windows" ]; then
            7z a -mx=9 ../${{ matrix.artifact_name }}.zip * || zip -r ../${{ matrix.artifact_name }}.zip ./*
          else
            tar -czf ../${{ matrix.artifact_name }}.tar.gz --owner=0 --group=0 --numeric-owner ./*
          fi
          cd ..

          echo "Archive created:"
          ls -lh ${{ matrix.artifact_name }}.*

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact_name }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.artifact_name }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.platform == 'windows' && 'application/zip' || 'application/gzip' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.*
            dist/*
          retention-days: 7
          compression-level: 9

  finalize-release:
    name: Finalize Release
    needs: [create-release, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always()
    steps:
      - name: Update release notes
        if: needs.build.result == 'success'
        run: |
          echo "All builds completed successfully for version ${{ github.event.inputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
